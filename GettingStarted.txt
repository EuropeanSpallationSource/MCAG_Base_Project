Some notes how to get started.

- EPICS:
  This projects supports 2 different ways how to start an EPICS IOC,
  both the "classic EPICS" directory structre and build system
  and the "ESS EPICS Environment" or "EEE", which uses a much simpler structure.
  (This build system is based on a development in PSI)
  The build & make system is more advanced behind the scenes,and easier to use.
  We want however support the "classic build system", as you can install
  e.g. everything on a Raspberry PI or on a Mac OS machine.

  m-epics-eemcu/doit.sh
  The shell script m-epics-eemcu/doit.sh should detect your EPICS installation
  and run the appropriate actions to build the system and start an IOC.

- Different hardware
  Currently we have a EPICS database for 2 different hardware configurations:
  SolAxis and TwoAxis.
  SolAxis is our single-solo axis, with a stepper motor, end swithes and a home sensor.
  TwoAxis is a configuration with 2 different stepper motors, without any other
  hardware like limit switches.
  Most probably the TwoAxis configuration will change, renamed or other
  configs will be added later.

- st.cmd
  The classic st.cmd is typically auto-generated by doit.sh,
  and because we are running on different platforms like linux-x86_64,
  linux-arm or darwin,
  doit.sh will autogenerate st.cmd.linux-x86_64 and similar for classic EPICS.and
  start it.
  For EEE a file like st.cmd.SolAxis.EEE is generated and executed.
  (This is not 100% consistant, I know)

  The effektive st.XXX is produced as follows:
  st-start.EEE or st-start.EPICS +
  st-main.SolAxis or st-main.TwoAxis (or other) +
  st-end.epics (when classic EPICS is used)



- Getting started.
  The fiest step may be to open 3 terminal windows:
  #Window 1, start the simulator:
  cd epics/simulator
  ./doit.sh
 
  #Window 2, run the EPICS IOC
  cd epics/m-epics-eemcu
  ./doit.sh SolAxis IP:PORT

  #Window 3, run the test script
  cd epics/testScripts
  ./doit.sh
