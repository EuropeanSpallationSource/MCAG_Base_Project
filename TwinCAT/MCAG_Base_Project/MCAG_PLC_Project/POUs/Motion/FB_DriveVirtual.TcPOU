<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="FB_DriveVirtual" Id="{45901cd0-c6d2-4114-b7cf-de832171219f}" SpecialFunc="None">
    <Declaration><![CDATA[///#########################################################
///Function block to run a virtual drive with Nc
///	Library:		
///	Tc2_MC2.lib
///
///	Global Variables:
///	
///	Data types:
///	
///	External functions:
///
///###########################################################
FUNCTION_BLOCK FB_DriveVirtual
VAR
	sVersion: STRING:='1.0.2';
	bMovingRelOrAbs: BOOL;
END_VAR
VAR_INPUT
	En: BOOL;
	bEnable: BOOL;
	bReset: BOOL;
	bExecute: BOOL;
	/////	nCommand...
	/////	0 = Jog
	/////	1 = MoveVelocity
	/////	2 = MoveRelative
	/////	3 = MoveAbsolut
	/////	4 = MoveModulo
	/////	10 = Homing
	/////	20 = SuperInp >>>ToBe
	/////	30 = Gear
	nCommand: UINT;
	nCmdData: UINT;
	fVelocity: LREAL;
	fPosition: LREAL;
	fAcceleration: LREAL;
	fDeceleration: LREAL;
	bJogFwd: BOOL;
	bJogBwd: BOOL;
	bLimitFwd: BOOL;
	bLimitBwd: BOOL;	
	fOverride: LREAL := 100;
	bHomeSensor: BOOL;
	fHomePosition:LREAL;
	nHomeRevOffset: UINT;
	MasterAxis: AXIS_REF;
	nMotionAxisID:UDINT:=0;  //Axis id in Motion (NC)
	bChanChangingDirection: INT;
END_VAR
VAR_OUTPUT
	EnO: BOOL;
	bEnabled: BOOL;
	bBusy: BOOL;
	bDone: BOOL;
	bError: BOOL;
	bHomed: BOOL;
	nErrorId: UDINT;
	Status: ST_AxisStatus;
	fActVelocity: LREAL;
	fActPosition: LREAL;
	fActDiff: LREAL;
    sErrorMessage:STRING;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR	
	bFirstScan: BOOL := TRUE;
	iCounter: INT := 0;
	fOldVelocity: LREAL;
	fbReset: MC_Reset;
	fbPower: MC_Power;
	fbHalt: MC_Halt;
	fbJog: MC_Jog;
	fbMoveVelocity: MC_MoveVelocity;
	fbMoveRelative: MC_MoveRelative;
	fbMoveAbsolute: MC_MoveAbsolute;
	fbMoveModulo: MC_MoveModulo;
	fbHome: MC_Home;
	fbGearInDyn: MC_GearInDyn;
	fbGearOut: MC_GearOut;
	stAxisStatus: DUT_AxisStatus_v0_01;
	////////////////////////////////////
//	fbReadParameter2:FB_ReadParameterInNc_v1_00;
	fbReadFloatParameter:FB_ReadFloatParameter;
	fbReadFloatParameter2:FB_ReadFloatParameter;
	fbReadFloatParameter3:FB_ReadFloatParameter;
	fbWriteParameter:FB_WriteParameterInNc_v1_00;
	fbWriteParameter2:FB_WriteParameterInNc_v1_00;
	fbWriteParameter3:FB_WriteParameterInNc_v1_00;
	fbWriteParameter4:FB_WriteParameterInNc_v1_00;
	fbRiseTrigger:R_trig;
	fDistance:LREAL;
	fCenterPosition:LREAL;
	fHomeVelocity:LREAL;
	fHomeReverseVelocity:LREAL;
	fPositionAfterSensor:LREAL;
	fSkipPosition:LREAL;
	fScalingFactor:LREAL;
	nCounter:UINT;
	nCounter2:UINT;
	nDelayCounter:UINT;
	nCalculatedCounter:UINT;
	nRealDirection:UINT;
	nExecutionCounter:UINT;
	nLimitCounter:UINT;
	nInternalHomeRevOffset:UINT;
	bHomeflag:BOOL;
	bHomeTrigg: BOOL;
	bLimitTrigg: BOOL;
	bCenterCalculated: BOOL;
	bDirection: BOOL;
	bChangeDir:BOOL;
	bReadyToGo:BOOL;
	bFlag1:BOOL;
	bFlagWrite4Done:BOOL;
	bMode6Flag:BOOL;
	bDirectionFlag:BOOL;
	bStartAtLimitSwitch:BOOL;
	bHomingToggled:BOOL;
	bHomingState1:BOOL;
	bHomingState2:BOOL;
	bHomingState3:BOOL;
	bHomingState4:BOOL;
	bHomingState5:BOOL;
	bHomingState6:BOOL;
	bHomingExecute:BOOL;
	bSyncError: BOOL;
	bLimitTimeOut:BOOL;
	bChangingDirection:BOOL;
	////////////////////////////////
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[EnO:=En;

bHomed:=Axis.Status.Homed; //Add in DUT_AxisStatus later
bDone:=FALSE;

(*Reset*)
fbReset(
	Execute:=bReset AND Axis.Status.Error,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Error=> ,
	ErrorID=> );

(*Power*)
fbPower(
	Axis:=Axis,
	Enable:=bEnable,
	Enable_Positive:=NOT bChangeDir AND bEnable AND NOT bSyncError AND (bLimitFwd OR (NOT bLimitTimeOut AND (nCommand=10 AND (nCmdData=2 OR nCmdData=10  OR nCmdData=1 OR nCmdData=9)))),
	Enable_Negative:=NOT bChangeDir AND bEnable AND NOT bSyncError AND (bLimitBwd OR (NOT bLimitTimeOut AND (nCommand=10 AND (nCmdData=2 OR nCmdData=10  OR nCmdData=1 OR nCmdData=9)))),
	Override:=fOverride,
	BufferMode:= ,
	Status=> ,
	Busy=> ,
	Active=> ,
	Error=> ,
	ErrorID=> );

(*Halt*)
fbHalt(
	Execute:=NOT bExecute  AND (((fbMoveVelocity.Busy OR fbPower.Busy) AND (nCommand=1)) OR (fbMoveRelative.Busy AND (nCommand=2)) OR (fbMoveAbsolute.Busy AND (nCommand=3)) OR (fbMoveModulo.Busy AND (nCommand=4)) OR (fbhome.Busy AND (nCommand=10))),
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=Axis ,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*Jog (Command = 0)*)
fbJog(
	JogForward:=bJogFwd AND (nCommand=0) ,
	JogBackwards:=bJogBwd AND (nCommand=0) ,
	Mode:=nCmdData,
	Position:= ,
	Velocity:=fVelocity,
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

	;
	iCounter:=iCounter+1;
(*MoveVelocity (Command = 1)*)
fbMoveVelocity(
	Execute:=bExecute (*AND (fOldVelocity=fVelocity)*) AND (nCommand=1),
	Velocity:=ABS(fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	Direction:=SEL(fVelocity<0, MC_Positive_Direction, MC_Negative_Direction),
	BufferMode:= ,
	Options:= ,
	Axis:=Axis,
	InVelocity=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*MoveRelative (Command = 2)*)
fbMoveRelative(
	Execute:=bExecute AND (nCommand=2), 
	Distance:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
IF nCommand=2 THEN
	bDone:=fbMoveRelative.Done;
END_IF
	
(*MoveAbsolute (Command = 3)*)
fbMoveAbsolute(
	Execute:=bExecute AND (nCommand=3),
	Position:=fPosition,
	Velocity:=ABS(fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

IF nCommand=3 THEN
	bDone:=fbMoveAbsolute.Done;
END_IF

(*MoveModulo (Command = 4)*)
fbMoveModulo(
	Execute:=bExecute AND (nCommand=4), 
	Position:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration, 
	Deceleration:=fDeceleration, 
	Jerk:=0, 
	Direction:=nCmdData, 
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

IF nCommand=4 THEN
	bDone:=fbMoveModulo.Done;
END_IF
	
(*Home (Command = 10)*)
fbHome(
	Execute:=bHomingExecute AND nCommand=10 AND bReadyToGo,
	Position:=fHomePosition,
	HomingMode:=0,
	BufferMode:= ,
	Options:= ,
	bCalibrationCam:=,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

IF nCommand=10 THEN
	bDone:=fbHome.Done;
END_IF
/////////////
IF bExecute AND NOT bHomingToggled AND nCommand=10 AND NOT bError THEN
	bHomingExecute:=TRUE;
END_IF
///////////////////////////////////////////Homing///////////////////////////////////////////////////////////////
(*Changing direction at the Limit Switches*)
IF bExecute AND nCommand=10  THEN
	nExecutionCounter:=nExecutionCounter+1;
ELSIF NOT bExecute AND  nCommand=10 AND NOT bHomingToggled THEN
	nExecutionCounter:=0;
END_IF
(*Counter on LimitSwitch to avoid error*)
IF bExecute AND (NOT bLimitFwd OR NOT bLimitBwd) AND fActVelocity<>0 THEN
	nLimitCounter:=nLimitCounter+1;
ELSIF bError AND nErrorId=16#4D06 THEN
	nLimitCounter:=nLimitCounter;
ELSE
	nLimitCounter:=0;
END_IF
(*Changing Direction process*)
fbRiseTrigger(CLK:=bLimitBwd , Q=> );
fbRiseTrigger(CLK:=bLimitFwd , Q=> );

IF bLimitBwd AND bLimitFwd AND bChangingDirection THEN
	bLimitTrigg:=TRUE;
	bChangingDirection:=FALSE;
END_IF

IF nCommand=10 AND (nCmdData=4 OR nCmdData=6 OR nCmdData=3 OR nCmdData=5 )AND bHomeflag AND NOT bHomeTrigg AND NOT bStartAtLimitSwitch THEN
	IF bHomingExecute AND (NOT bLimitBwd OR NOT bLimitFwd OR bChangeDir) AND bFlagWrite4Done THEN
		bHomingExecute:=FALSE;
		bChangeDir:=FALSE;
		bHomingToggled:=TRUE;
	ELSIF  fbWriteParameter.bDone AND ABS(fActVelocity)<=4 THEN	//(fHomeVelocity-1
		bHomingExecute:=TRUE;
		bHomeTrigg:=TRUE;
		bHomingToggled:=FALSE;
	END_IF
	bChangingDirection:=TRUE;
END_IF
(*Changing configuration depending on selected Homing Procedure*)
fbWriteParameter(
	bExecute:=nCommand=10 AND NOT bStartAtLimitSwitch AND (NOT bLimitBwd OR NOT bLimitFwd OR bCenterCalculated) AND bFlagWrite4Done AND bHomeflag AND ((nCmdData=4 OR nCmdData=3) OR (nCmdData=6 OR nCmdData=5)),
	nDeviceGroup:= 16#5000,
	nIndexOffset:=16#101,	//Direction for Calibration Cam Search
	nData:=,
	bBusy=>,
	bDone=>,
	bError=>,
	nErrorId=>,
	Axis:=Axis);
fbWriteParameter2(		//Write PLC Cam or Hardaware Sync Reference Mode depending on the Homing procedure
	bExecute:=nCommand=10 AND bExecute,
	nDeviceGroup:=16#5000 ,
	nIndexOffset:=16#107,  //Reference Mode
	nData:= ,
	bBusy=> ,
	bDone=> ,
	bError=> ,
	nErrorId=> ,
	Axis:=axis );
fbReadFloatParameter(
	bExecute:= bHomeflag AND NOT bCenterCalculated,
	nDeviceGroup:= 16#4000,
	nIndexOffset:= 16#7,
	nData=> ,
	bBusy=> ,
	bDone=> ,
	bError=> ,
	nErrorId=> ,
	Axis:= Axis);
fbReadFloatParameter3(
    bExecute:= nCommand=10 AND (nCmdData=9 OR nCmdData=10) AND bexecute,
	nDeviceGroup:= 16#5000,
	nIndexOffset:= 16#23,
	nData=> ,
	bBusy=> ,
	bDone=> ,
	bError=> ,
	nErrorId=> ,
	Axis:= Axis);
fbReadFloatParameter2(
	bExecute:= bHomeflag AND NOT bCenterCalculated,
	nDeviceGroup:= 16#4000,
	nIndexOffset:= 16#6 ,
	nData=> ,
	bBusy=> ,
	bDone=> ,
	bError=> ,
	nErrorId=> ,
	Axis:= Axis);
fbWriteParameter3( //(NOT bLimitBwd OR NOT bLimitFwd) OR bCenterCalculated) OR
	bExecute:= bCenterCalculated OR nCommand=10 AND (((nCmdData=4 OR nCmdData=3) AND bHomeFlag) OR bExecute AND (((nCmdData=8 OR nCmdData=7) AND bReadyToGo )OR (bReadyToGo AND (nCmdData=2 OR nCmdData=10 OR nCmdData=1 OR nCmdData=9)))),
	nDeviceGroup:=16#5000 ,
	nIndexOffset:=16#102 , //Direction for Sync Impuls Search
	nData:= ,
	bBusy=> ,
	bDone=> ,
	bError=> ,
	nErrorId=> ,
	Axis:=axis );
fbWriteParameter4(		//Write the direction for Homing
	bExecute:=nCommand=10 AND bExecute AND NOT bReadyToGo,
	nDeviceGroup:=16#5000 ,
	nIndexOffset:=16#101 ,  //Direction for Calibration Cam Search
	nData:= nRealDirection,
	bBusy=> ,
	bDone=> ,
	bError=> ,
	nErrorId=> ,
	Axis:=axis );
(*Restart the variables*)
IF  (bHomed AND NOT bExecute AND NOT bHomingToggled) OR bReset THEN //If we not consider to bExecute=FALSE an Error we can removed bHomed and in that way evry time bExecute=FALSE the variable will be initialised
		bReadyToGo:=FALSE;
		bFlag1:=FALSE;
		bHomeflag:=FALSE;
		bCenterCalculated:=FALSE;
		bHomeTrigg:=FALSE;
		bDirectionFlag:=FALSE;
		bStartAtLimitSwitch:=FALSE;
		bFlagWrite4Done:=FALSE;
		bHomingToggled:=FALSE;
		bHomingState1:=FALSE;
		bHomingState2:=FALSE;
		bHomingState3:=FALSE;
		bHomingState4:=FALSE;
		bHomingState5:=FALSE;
		bHomingState6:=FALSE;
		bSyncError:=FALSE;
		bLimitTimeOut:=FALSE;
		bLimitTrigg:=FALSE;
		bHomingExecute:=FALSE;
		bChangingDirection:=FALSE;
		nCounter:=0;
		nCounter2:=0;
		nInternalHomeRevOffset:=0;
		fDistance:=0;
		fCenterPosition:=0;
		fHomeVelocity:=0;
		fHomeReverseVelocity:=0;
		fSkipPosition:=0;
		fScalingFactor:=0;
		fPositionAfterSensor:=0;
		nCalculatedCounter:=0;
END_IF
(*Homing direction depending on selected Homing Procedure*)
IF nCommand=10 THEN
	IF nExecutionCounter=1 AND (((nCmdData=3 OR nCmdData=5) AND NOT bLimitBwd) OR ((nCmdData=4 OR nCmdData=6) AND NOT bLimitFwd)) THEN
			bStartAtLimitSwitch:=TRUE;
			bFlagWrite4Done:=TRUE;
			bHomeflag:=TRUE;
			bChangingDirection:=TRUE;
			nRealDirection:=SEL(nCmdData MOD 2=0,0,1);
	ELSIF NOT(nCmdData=7 OR nCmdData=8) AND NOT bStartAtLimitSwitch THEN
		nRealDirection:=SEL(nCmdData MOD 2=0,1,0);
	ELSIF (nCmdData=7 OR nCmdData=8) AND bHomeSensor AND NOT bDirectionFlag THEN
		nRealDirection:=0;
		bDirectionFlag:=TRUE;
	ELSIF (nCmdData=7 OR nCmdData=8) AND NOT bHomeSensor AND NOT bDirectionFlag THEN
		nRealDirection:=1;
		bDirectionFlag:=TRUE;
	END_IF
	IF fbWriteParameter4.bDone THEN
		bFlagWrite4Done:=TRUE;
	END_IF
END_IF
(*Homing Procedures*)
(*Mode 1*)
IF  nCommand=10 AND (nCmdData=2 OR nCmdData=1) AND bExecute THEN //Mode 1 (* EndSwitches as Home *)
	fbWriteParameter2.nData:=1;			//PLC Cam Reference Mode
	IF fbWriteParameter2.bDone  THEN	//Wait till Homing configured as desired
		bReadyToGo:=TRUE;
		IF nRealDirection=0 THEN
			fbHome.bCalibrationCam:=NOT(bLimitFwd);
		ELSIF nRealDirection=1 THEN
			fbHome.bCalibrationCam:=NOT(bLimitBwd);
		END_IF
		fbWriteParameter3.nData:=SEL(nRealDirection=0,0,1);	//Direction from PLC Cam must be the opposite in this case
	END_IF
END_IF
(*Mode 2*)
IF nCommand=10 AND (nCmdData=4 OR nCmdData=3) AND bExecute THEN //Mode 2 (*Go to EndSwitch and then to the HomeSensor*)
	fbWriteParameter2.nData:=1;		//PLC Cam Reference Mode
	IF fbWriteParameter2.bDone THEN	//Wait till Homing configured as desired	//AND bFlagWrite4Done
		bReadyToGo:=TRUE;
		IF NOT bHomeflag THEN		//Wait till LimitSwitch is activated
			fbHome.bCalibrationCam:=FALSE;
		ELSE
			fbHome.bCalibrationCam:=bHomeSensor;
		END_IF
		IF nRealDirection=0 THEN
			IF NOT bLimitFwd THEN
				fbWriteParameter.nData:=1;	//SEL(nRealDirection=0,0,1)
				bHomeflag:=TRUE;
			END_IF
		ELSIF nRealDirection=1 THEN
			IF NOT bLimitBwd THEN
				fbWriteParameter.nData:=0;		//SEL(nRealDirection=0,1,0)
				bHomeflag:=TRUE;
			END_IF
		END_IF
		IF bStartAtLimitSwitch THEN
			fbWriteParameter3.nData:=SEL(nRealDirection=0,0,1);		//SEL(nRealDirection=0,1,0)   //Direction from PLC Cam must be the opposite in this case
		ELSE
			fbWriteParameter3.nData:=nRealDirection;		//nRealDirection 	//Direction from PLC Cam must be the opposite in this case
		END_IF
	END_IF
END_IF
(*Mode 3*)
IF nCommand=10 AND (nCmdData=6 OR nCmdData=5) AND bExecute THEN
	fbWriteParameter2.nData:=1;		//PLC Cam Reference Mode
	IF fbWriteParameter2.bDone THEN		//Wait till Homing configured as desired
		bReadyToGo:=TRUE;
		fbWriteParameter4.bExecute:=FALSE;
		IF NOT bHomeflag THEN
			fbHome.bCalibrationCam:=FALSE;
		ELSIF bHomeflag AND NOT bCenterCalculated THEN
			fbHome.bCalibrationCam:=FALSE;
			IF bHomeSensor  THEN
				nCounter:=nCounter+1;
			ELSIF (NOT bHomeSensor OR NOT bLimitBwd OR NOT bLimitFwd) AND nCounter<>0 THEN
				//Change direction and bHomeSensor calibration CAm
				bHomeSensor:=FALSE; //Case the sensor is almost at the end and not possible to measure the whole length of the sensor
				fDistance:=(UINT_TO_LREAL(nCounter)*fHomeVelocity)/2;
				fCenterPosition:=fDistance/fHomeReverseVelocity;
				nCalculatedCounter:=LREAL_TO_UINT(fCenterPosition);
				bCenterCalculated:=TRUE;
				bStartAtLimitSwitch:=FALSE;
				bChangeDir:=TRUE;
				bHomeTrigg:=FALSE;
				IF bDirection THEN
					fbWriteParameter.nData:=0;
					fbWriteParameter3.nData:=0;
				ELSE
					fbWriteParameter.nData:=1;
					fbWriteParameter3.nData:=1;
				END_IF
			END_IF
		ELSIF bHomeFlag AND bCenterCalculated THEN
			fbHome.bCalibrationCam:=bHomeSensor;
			IF bHomeSensor AND axis.Status.Moving  THEN
				nCounter2:=nCounter2+1;
				IF  nCounter2=nCalculatedCounter THEN
					fbHome.bCalibrationCam:=FALSE;
				END_IF
			END_IF
		END_IF
		IF nRealDirection=0 THEN
			IF  NOT bLimitFwd THEN
					fbWriteParameter.nData:=1;
					bDirection:=TRUE;
					bHomeflag:=TRUE;
			END_IF
		ELSIF nRealDirection=1 THEN
			IF NOT bLimitBwd THEN
					fbWriteParameter.nData:=0;
					bDirection:=FALSE;
					bHomeflag:=TRUE;
			END_IF
		END_IF
			fHomeVelocity:=fbReadFloatParameter2.nData;
			fHomeReverseVelocity:=fbReadFloatParameter.nData;
	END_IF
END_IF

(*Mode 4*)
(*IF nCommand=10 AND (nCmdData=8 OR nCmdData=7) AND bExecute THEN (* Mode 4: Home switch step function. No mechanical switches *)
	fbWriteParameter2.nData:=1;	//PLC Cam Reference Mode
	IF fbWriteParameter2.bDone THEN		//Wait till Homing configured as desired
		fbWriteParameter4.bExecute:=FALSE;
	//	IF NOT bStop THEN
			IF NOT fbHome.Done THEN
				IF bHomeSensor THEN
					IF  NOT bFlag2 THEN
						bFlag1:=TRUE;
						fbWriteParameter3.nData:=SEL(nEncDirection=0,1,0);
						fbHome.bCalibrationCam:=bHomeSensor;
					ELSE
						fbHome.bCalibrationCam:=NOT(bHomeSensor);
					END_IF
				ELSE
					IF NOT bFlag1 THEN
						bFlag2:=TRUE;
						fbWriteParameter3.nData:=SEL(nEncDirection=0,0,1);
						fbHome.bCalibrationCam:=NOT(bHomeSensor);
					ELSE
						fbHome.bCalibrationCam:=bHomeSensor;
					END_IF
				END_IF
				IF fbWriteParameter3.bDone THEN
					bReadyToGo:=TRUE;
				END_IF
			END_IF
	END_IF
//	END_IF
//ELSE
	//bStop:=FALSE;
END_IF*)

IF nCommand=10 AND (nCmdData=8 OR nCmdData=7) AND bExecute THEN (* Mode 4: Home switch step function. No mechanical switches *)
	fbWriteParameter2.nData:=1;	//PLC Cam Reference Mode
	IF fbWriteParameter2.bDone THEN		//Wait till Homing configured as desired
		fbWriteParameter4.bExecute:=FALSE;
		bReadyToGo:=TRUE;
		IF nRealDirection=0 THEN
			fbHome.bCalibrationCam:=NOT(bHomeSensor);
		ELSIF nRealDirection=1 THEN
			fbHome.bCalibrationCam:=bHomeSensor;
		END_IF
		fbWriteParameter3.nData:=SEL(nRealDirection=0,0,1);	//Direction from PLC Cam must be the opposite in this case
	END_IF
END_IF
(*
(*Mode 5*)
IF  nCommand=10 AND (nCmdData=10 OR nCmdData=9) AND bExecute THEN //Mode 5 (* EndSwitch and syncronise with the index signal from the encoder *)
		fbWriteParameter2.nData:=2;	//Hardware Sync Reference Mode
		fScalingFactor:=fbReadFloatParameter3.nData;
		nInternalHomeRevOffset:=1;
		IF fbWriteParameter2.bDone  THEN	//Wait till Homing configured as desired
			fbWriteParameter4.bExecute:=FALSE;
			bReadyToGo:=TRUE;
			IF nRealDirection=0 THEN
				fbHome.bCalibrationCam:=NOT(bLimitFwd);
				IF NOT bLimitFwd THEN
					fPositionAfterSensor:=fActPosition;
				END_IF
			ELSIF nRealDirection=1 THEN
				fbHome.bCalibrationCam:=NOT(bLimitBwd);
				IF NOT bLimitBwd THEN
					fPositionAfterSensor:=fActPosition;
				END_IF
			END_IF
			fbWriteParameter3.nData:=SEL(nRealDirection=0,0,1);	//Direction from PLC Cam must be the opposite in this case
		END_IF

END_IF
*)
(*Mode 5*)
IF  nCommand=10 AND (nCmdData=10 OR nCmdData=9) AND bExecute THEN //Mode 5 (* EndSwitch and syncronise with the index signal from the encoder. Possibility of choosing how many index signals before homed
	fbWriteParameter2.nData:=2;	//Hardware Sync Reference Mode
	fScalingFactor:=fbReadFloatParameter3.nData;
		IF fbWriteParameter2.bDone  THEN	//Wait till Homing configured as desired
			fbWriteParameter4.bExecute:=FALSE;
			bReadyToGo:=TRUE;
			IF nRealDirection=0 THEN
				fbHome.bCalibrationCam:=NOT(bLimitFwd);
				IF NOT bLimitFwd THEN
					fPositionAfterSensor:=fActPosition;
					fSkipPosition:=fPositionAfterSensor-fScalingFactor*UINT_TO_LREAL(nHomeRevOffset-1);
					nInternalHomeRevOffset:=nHomeRevOffset; //Remove if we don't use finally Mode 5
					bFlag1:=TRUE;
				END_IF
			ELSIF nRealDirection=1 THEN
				fbHome.bCalibrationCam:=NOT(bLimitBwd);
				IF NOT bLimitBwd THEN
					fPositionAfterSensor:=fActPosition;
					fSkipPosition:=fPositionAfterSensor+fScalingFactor*UINT_TO_LREAL(nHomeRevOffset-1);
					nInternalHomeRevOffset:=nHomeRevOffset; //Remove if we don't use finally Mode 5
					bFlag1:=TRUE;
				END_IF
			END_IF
			IF bFlag1 THEN
				fbHome.bCalibrationCam:=TRUE;
			ELSE
				fbHome.bCalibrationCam:=FALSE;
			END_IF
			IF fActPosition=fSkipPosition THEN
				bFlag1:=FALSE;
			END_IF
			fbWriteParameter3.nData:=SEL(nRealDirection=0,0,1);	//Direction from PLC Cam must be the opposite in this case
		END_IF
END_IF

(*Homing States*)
CASE axis.NcToPlc.HomingState OF
	1:	bHomingState1:=TRUE;
	2:	bHomingState2:=TRUE;
	3:	bHomingState3:=TRUE;
	4:	bHomingState4:=TRUE;
	5:	bHomingState5:=TRUE;
	6:	bHomingState6:=TRUE;
END_CASE

(*Gear (Command = 30)*)
fbGearInDyn(
	Enable:=bExecute  AND (nCommand=30),
	GearRatio:=SEL(nCmdData>0, 1,fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0.0,
	BufferMode:= , 
	Options:= , 
	Master:=MasterAxis,
	Slave:=Axis,
	InGear=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
fbGearOut(
	Execute:=NOT bExecute AND Axis.Status.NotMoving AND (nCommand=30),
	Slave:=Axis,
	Error=>,
	Done=>,
	ErrorID=>);


IF nCommand=30 THEN
	bDone:=Axis.Status.Coupled;
END_IF

fOldVelocity:=fVelocity;

(*Busy*)
bMovingRelOrAbs := (nCommand = 2 OR nCommand = 3) AND NOT axis.Status.InTargetPosition;
bBusy:=(Axis.Status.HasJob OR Axis.Status.HomingBusy OR bChangingDirection OR  bMovingRelOrAbs) AND NOT bError;

(*Enabled*)
bEnabled:=fbPower.Status;

(*Error from functions and Nc*)
IF fbPower.Error AND fbPower.Active THEN
	bError:=fbPower.Enable;
	nErrorId:=fbPower.ErrorID;
ELSIF fbHalt.Error AND fbHalt.Active THEN
	bError:=fbHalt.Execute;
	nErrorId:=fbHalt.ErrorID;
ELSIF fbJog.Error AND nCommand=0 (*fbJog.Active*) THEN
	bError:=fbJog.JogForward OR fbJog.JogBackwards;
	nErrorId:=fbJog.ErrorID;
ELSIF fbMoveVelocity.Error AND nCommand=1(*fbMoveVelocity.Active*) THEN
	bError:=fbMoveVelocity.Execute;
	nErrorId:=fbMoveVelocity.ErrorID;
ELSIF fbMoveRelative.Error AND nCommand=2 (*fbMoveRelative.Active*) THEN
	bError:=fbMoveRelative.Execute;
	nErrorId:=fbMoveRelative.ErrorID;
ELSIF fbMoveAbsolute.Error AND nCommand=3 (*fbMoveAbsolute.Active*) THEN
	bError:=fbMoveAbsolute.Execute;
	nErrorId:=fbMoveAbsolute.ErrorID;
ELSIF fbMoveModulo.Error AND nCOmmand=4 (*fbMoveModulo.Active*) THEN
	bError:=fbMoveModulo.Execute;
	nErrorId:=fbMoveModulo.ErrorID;
ELSIF fbHome.Error AND nCommand=10 (*fbHome.Active*) THEN
	bError:=fbHome.Execute;
	nErrorId:=fbHome.ErrorID;
ELSIF fbGearInDyn.Error AND nCommand=30 (*fbGearInDyn.Active*) THEN
	bError:=fbGearInDyn.Enable;
	nErrorId:=fbGearInDyn.ErrorID;
ELSIF fbGearOut.Error AND nCommand=30 AND Axis.Status.Coupled THEN
	bError:=fbGearOut.Execute;
	nErrorId:=fbGearOut.ErrorID;
ELSIF Axis.Status.Error  THEN
	bError:=TRUE;
	nErrorId:=Axis.Status.ErrorID;
(*ELSIF fbWriteToNC.bError THEN
	bError:=TRUE;
	nErrorId:=fbWriteToNC.nErrorId;*)
///////////////////////////////////
ELSIF fbWriteParameter.bError AND fbWriteParameter.bBusy THEN
	bError:=fbWriteParameter.bExecute;
	nErrorId:=fbWriteParameter.nErrorId;
ELSIF fbWriteParameter2.bError AND fbWriteParameter2.bBusy THEN
	bError:=fbWriteParameter2.bExecute;
	nErrorId:=fbWriteParameter2.nErrorId;
ELSIF fbWriteParameter3.bError AND fbWriteParameter3.bBusy THEN
	bError:=fbWriteParameter3.bExecute;
	nErrorId:=fbWriteParameter3.nErrorId;
ELSIF fbWriteParameter4.bError AND fbWriteParameter4.bBusy THEN
	bError:=fbWriteParameter4.bExecute;
	nErrorId:=fbWriteParameter4.nErrorId;
ELSIF fbReadFloatParameter.bError AND fbReadFloatParameter.bBusy THEN
	bError:=fbReadFloatParameter.bExecute;
	nErrorId:=fbReadFloatParameter.nErrorId;
ELSIF fbReadFloatParameter2.bError AND fbReadFloatParameter2.bBusy THEN
	bError:=fbReadFloatParameter2.bExecute;
	nErrorId:=fbReadFloatParameter2.nErrorId;
ELSIF fbReadFloatParameter3.bError AND fbReadFloatParameter3.bBusy THEN
	bError:=fbReadFloatParameter3.bExecute;
	nErrorId:=fbReadFloatParameter3.nErrorId;
///////////////////////////////////Homing Errors Treatment 0x4Dnn///////////////////
ELSIF bHomingState1 AND NOT bExecute AND NOT bHomingState6 AND NOT bHomingToggled THEN
	bError:=TRUE;
	nErrorId:=16#4D01;	//bExecute gets down before bHomed
ELSIF bHomeflag AND bLimitTrigg  AND (NOT bLimitBwd OR NOT bLimitFwd) AND (nCmdData>=2 AND nCmdData<=5) THEN
	bError:=TRUE;
	nErrorId:=16#4D02; //HomeSensor not detected 	(*Mode 2 and Mode 3*)
ELSIF bHomingState4 AND (NOT bLimitBwd OR NOT bLimitFwd) AND (NOT nCmdData=9 OR NOT nCmdData=10) AND NOT bHomingToggled THEN
	bHomingExecute:=FALSE;
	bSyncError:=TRUE;
	bError:=TRUE;
	nErrorId:=16#4D03; //Unsual error. (The sensor is detected but don't stopped after that)
ELSIF nCommand=10 AND (nCmdData=9 OR nCmdData=10) AND fActPosition<=fPositionAfterSensor-fScalingFactor*UINT_TO_LREAL(nInternalHomeRevOffset)  AND  bHomingState4 AND NOT bHomed  THEN
	bHomingExecute:=FALSE;
	bSyncError:=TRUE;	//Could be done like that or wait till blimitswitch
	bError:=TRUE;
	nErrorId:=16#4D04; //Not Sync Pulse detected
ELSIF nCommand=10 AND (nCmdData=9 OR nCmdData=10) AND fActPosition>=fPositionAfterSensor+fScalingFactor*UINT_TO_LREAL(nInternalHomeRevOffset) AND bHomingState4 AND NOT bHomed THEN
	bHomingExecute:=FALSE;
	bError:=TRUE;
	bSyncError:=TRUE;
	nErrorId:=16#4D04; //Not Sync Pulse detected
ELSIF nCommand=10 AND (nCmdData=9 OR nCmdData=10) AND nHomeRevOffset=0 THEN
	bError:=TRUE;
	bSyncError:=TRUE;
	nErrorId:=16#4D05; //Index Can't be 0
ELSIF nCommand=10 AND (nCmdData=9 OR nCmdData=10) AND bHomingState4 AND ((NOT bLimitBwd AND nRealDirection=0) OR (NOT bLimitFwd AND nRealDirection=1)) THEN
	bError:=TRUE;
	bSyncError:=TRUE;
	nErrorId:=16#4D06; //More Index pulses selected than possible
ELSIF nCommand=10 AND (nCmdData=9 OR nCmdData=10) AND bHomingState4 AND fActPosition>=(fPositionAfterSensor+fScalingFactor*UINT_TO_LREAL(nInternalHomeRevOffset-1)+5) AND NOT bHomingState5 THEN //if we don't detect the Searching Sync State
	bError:=TRUE;
	bSyncError:=TRUE;
	nErrorId:=16#4D07; //Not Encoder, therefore not able to use  Mode 5
ELSIF nCommand=10 AND (nCmdData=9 OR nCmdData=10) AND bHomingState4 AND fActPosition<=(fPositionAfterSensor-fScalingFactor*UINT_TO_LREAL(nInternalHomeRevOffset-1)-5) AND NOT bHomingState5 THEN
	bError:=TRUE;
	bSyncError:=TRUE;
	nErrorId:=16#4D07; //Not Encoder, therefore not able to use  Mode 5

///////////////////////////////////
ELSIF nLimitCounter>=300 THEN
	bError:=TRUE;
	bLimitTimeOut:=TRUE;
	nErrorId:=16#4D08; //Error in the Limit Switch.
///////////////////////////////////
ELSE
	bError:=FALSE;
	nErrorId:=0;
END_IF;

(*Converese nErrorID to string*)
sErrorMessage:=WORD_TO_HEXSTR(in:=TO_WORD(nErrorID) , iPrecision:= 4, bLoCase:=0 );

(*Status from Nc*)
Status:=Axis.Status;

(*Axis id in motion "motor"*)
nMotionAxisID:=axis.NcToPlc.AxisId;

(*Actual Velocity*)
fActVelocity:=Axis.NcToPlc.ActVelo;

(*Actual Position*)
IF Axis.Status.OpMode.Modulo THEN
	fActPosition:=Axis.NcToPlc.ModuloActPos;
ELSE
	fActPosition:=Axis.NcToPlc.ActPos;
END_IF

(*Actual Position*)
fActDiff:=Axis.NcToPlc.PosDiff;


//Status struct for EPICS communication
stAxisStatus.bEnable:=bEnable;
stAxisStatus.bEnabled:=bEnabled;
stAxisStatus.bError:=bError;
stAxisStatus.bExecute:=bExecute;
stAxisStatus.bHomeSensor:=bHomeSensor;
stAxisStatus.bJogBwd:=bJogBwd;
stAxisStatus.bJogFwd:=bJogFwd;
stAxisStatus.bLimitBwd:=bLimitBwd;
stAxisStatus.bLimitFwd:=bLimitFwd;
stAxisStatus.bReset:=bReset;
stAxisStatus.fAcceleration:=fAcceleration;
stAxisStatus.fActDiff:=fActDiff;
stAxisStatus.fActPosition:=fActPosition;
stAxisStatus.fActVelocity:=fActVelocity;
stAxisStatus.fDeceleration:=fDeceleration;
stAxisStatus.fOverride:=fOverride;
stAxisStatus.fPosition:=fPosition;
stAxisStatus.fVelocity:=fVelocity;
stAxisStatus.nCmdData:=nCmdData;
stAxisStatus.nCommand:=nCommand;
stAxisStatus.nErrorId:=nErrorId;
stAxisStatus.bBusy:=bBusy;
stAxisStatus.bHomed:=bHomed;

IF bFirstScan THEN
	bFirstScan:=FALSE;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>