<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_EL3773_v1_00" Id="{f2581db0-ffb9-4d26-b1f4-4c0da2d93860}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EL3773_v1_00
VAR CONSTANT
	cDcOversampling: INT := 10;
	///200 samples/period
	cBufferSize: INT := 600;
END_VAR
VAR_INPUT
	En: BOOL;
	fTransformerGain: LREAL := 1;
END_VAR
VAR_OUTPUT
	EnO: BOOL;
	bL1Ok: BOOL;
	aBufferL1Voltage: ARRAY[0..(cBufferSize - 1)] OF LREAL;
	aBufferL1Current: ARRAY[0..(cBufferSize - 1)] OF LREAL;
	bL2Ok: BOOL;
	aBufferL2Voltage: ARRAY[0..(cBufferSize - 1)] OF LREAL;
	aBufferL2Current: ARRAY[0..(cBufferSize - 1)] OF LREAL;
	bL3Ok: BOOL;
	aBufferL3Voltage: ARRAY[0..(cBufferSize - 1)] OF LREAL;
	aBufferL3Current: ARRAY[0..(cBufferSize - 1)] OF LREAL;
	aBufferDcTime: ARRAY[0..(cBufferSize - 1)] OF ULINT;
	bError: BOOL;
END_VAR
VAR
	nOldDcTimeNextLatch: ULINT;
	nDcTimeDiff: LREAL;
	nIndex: INT;
	L1_Voltage_Status_U1 AT %I*: UINT;
	L1_Voltage_Samples_U1_Samples AT %I*: ARRAY[0..(cDcOversampling - 1)] OF INT;
	L1_Current_Status_I1_Status AT %I*: UINT;
	L1_Current_Samples_I1_Samples AT %I*: ARRAY[0..(cDcOversampling - 1)] OF INT;
	L2_Voltage_Status_U2 AT %I*: UINT;
	L2_Voltage_Samples_U2_Samples AT %I*: ARRAY[0..(cDcOversampling - 1)] OF INT;
	L2_Current_Status_I2_Status AT %I*: UINT;
	L2_Current_Samples_I2_Samples AT %I*: ARRAY[0..(cDcOversampling - 1)] OF INT;
	L3_Voltage_Status_U3 AT %I*: UINT;
	L3_Voltage_Samples_U3_Samples AT %I*: ARRAY[0..(cDcOversampling - 1)] OF INT;
	L3_Current_Status_I3_Status AT %I*: UINT;
	L3_Current_Samples_I3_Samples AT %I*: ARRAY[0..(cDcOversampling - 1)] OF INT;
	AI_NextSync1Time_StartTimeNextLatch AT %I*: ULINT;
	WcState_WcState AT %I*: BOOL;
	InfoData_State AT %I*: UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[EnO:=En;

IF En AND (WcState_WcState OR InfoData_State<>16#8) THEN
	bError:=TRUE;
ELSE
	bError:=FALSE;
END_IF

IF En THEN
	IF bError=FALSE THEN
		IF (L1_Voltage_Status_U1 AND 2#0110000001000011)<>0
		OR (L1_Current_Status_I1_Status AND 2#0110000001000011)<>0 THEN
			bL1Ok:= FALSE;
		ELSE
			bL1Ok:= TRUE;
		END_IF
		
		IF (L2_Voltage_Status_U2 AND 2#0110000001000011)<>0
		OR (L2_Current_Status_I2_Status AND 2#0110000001000011)<>0 THEN
			bL2Ok:= FALSE;
		ELSE
			bL2Ok:= TRUE;
		END_IF
		
		IF (L3_Voltage_Status_U3 AND 2#0110000001000011)<>0
		OR (L3_Current_Status_I3_Status AND 2#0110000001000011)<>0 THEN
			bL3Ok:= FALSE;
		ELSE
			bL3Ok:= TRUE;
		END_IF

(*Store all values in buffers*)
		MEMMOVE(
			destAddr:= ADR(aBufferL1Voltage[cDcOversampling]),
			srcAddr:= ADR(aBufferL1Voltage[0]),
			n:= INT_TO_UDINT((cBuffersize-cDcOversampling)*8));

		MEMMOVE(
			destAddr:= ADR(aBufferL1Current[cDcOversampling]),
			srcAddr:= ADR(aBufferL1Current[0]),
			n:= INT_TO_UDINT((cBuffersize-cDcOversampling)*8));

		MEMMOVE(
			destAddr:= ADR(aBufferL2Voltage[cDcOversampling]),
			srcAddr:= ADR(aBufferL2Voltage[0]),
			n:= INT_TO_UDINT((cBuffersize-cDcOversampling)*8));

		MEMMOVE(
			destAddr:= ADR(aBufferL2Current[cDcOversampling]),
			srcAddr:= ADR(aBufferL2Current[0]),
			n:= INT_TO_UDINT((cBuffersize-cDcOversampling)*8));

		MEMMOVE(
			destAddr:= ADR(aBufferL3Voltage[cDcOversampling]),
			srcAddr:= ADR(aBufferL3Voltage[0]),
			n:= INT_TO_UDINT((cBuffersize-cDcOversampling)*8));

		MEMMOVE(
			destAddr:= ADR(aBufferL3Current[cDcOversampling]),
			srcAddr:= ADR(aBufferL3Current[0]),
			n:= INT_TO_UDINT((cBuffersize-cDcOversampling)*8));

		FOR nIndex:=cDcOversampling-1 TO 0 BY -1 DO
			aBufferL1Voltage[nIndex]:=INT_TO_LREAL(L1_Voltage_Samples_U1_Samples[cDcOversampling-1-nIndex])*0.01251259; (*410V/32767=0.01251259*)
			aBufferL1Current[nIndex]:=INT_TO_LREAL(L1_Current_Samples_I1_Samples[cDcOversampling-1-nIndex])*0.00004578*fTransformerGain; (*1.5A/32767=0.00004578*)
			aBufferL2Voltage[nIndex]:=INT_TO_LREAL(L2_Voltage_Samples_U2_Samples[cDcOversampling-1-nIndex])*0.01251259; (*410V/32767=0.01251259*)
			aBufferL2Current[nIndex]:=INT_TO_LREAL(L2_Current_Samples_I2_Samples[cDcOversampling-1-nIndex])*0.00004578*fTransformerGain; (*1.5A/32767=0.00004578*)
			aBufferL3Voltage[nIndex]:=INT_TO_LREAL(L3_Voltage_Samples_U3_Samples[cDcOversampling-1-nIndex])*0.01251259; (*410V/32767=0.01251259*)
			aBufferL3Current[nIndex]:=INT_TO_LREAL(L3_Current_Samples_I3_Samples[cDcOversampling-1-nIndex])*0.00004578*fTransformerGain; (*1.5A/32767=0.00004578*)
		END_FOR

(*Store DC-time in buffer*)
		MEMMOVE(
			destAddr:= ADR(aBufferDcTime[cDcOversampling]),
			srcAddr:= ADR(aBufferDcTime[0]),
			n:= INT_TO_UDINT((cBuffersize-cDcOversampling)*8)); //ULINT = 8 byte
		
		nDcTimeDiff:=ULINT_TO_LREAL(AI_NextSync1Time_StartTimeNextLatch-nOldDcTimeNextLatch);
		
		IF nDcTimeDiff<>0 THEN
			FOR nIndex:=1 TO cDcOversampling DO
				aBufferDcTime[cDcOversampling-nIndex]:=nOldDcTimeNextLatch+LREAL_TO_ULINT((nIndex*nDcTimeDiff/cDcOversampling));
			END_FOR
		ELSE
			bError:=TRUE;
			FOR nIndex:=1 TO cDcOversampling DO
				aBufferDcTime[cDcOversampling-nIndex]:=0;
			END_FOR
		END_IF
		
		nOldDcTimeNextLatch:=AI_NextSync1Time_StartTimeNextLatch;
	ELSE
		bL1Ok:= FALSE;
		bL2Ok:= FALSE;
		bL3Ok:= FALSE;
	END_IF
END_IF
]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>