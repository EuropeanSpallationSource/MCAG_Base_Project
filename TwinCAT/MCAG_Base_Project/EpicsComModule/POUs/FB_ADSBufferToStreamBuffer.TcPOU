<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_ADSBufferToStreamBuffer" Id="{4e8c48d8-01ff-4e7d-b0f7-969110fcb194}">
    <Declaration><![CDATA[///#########################################################
///Function block used to convert binary ADS buffer to ASCII Stream buffer
///	Library:		
///	
///
///	Global Variables:
///	- EPICS_MAX_FRAME_SIZE					
///	- EPICS_ARRAY_DELIMITER					
///	- EPICS_COMMAND_DELIMITER
/// - PLCPRJ_BUFFER_SIZE				 
///
///	Data types:
///	
///	External functions:
///		- TC2_Standard lib
///		- Tc2_Utilities lib
///		- Tc2_System lib
///		
///###########################################################

FUNCTION_BLOCK FB_ADSBufferToStreamBuffer
VAR
	sVersion: STRING:='0.9.0';
END_VAR
VAR_INPUT
	bExecute: BOOL;
	symbolInfo:SYMINFOSTRUCT;
	sVariableName:STRING:='';
	bReturnVariableName:BOOL:=FALSE;
END_VAR
VAR_IN_OUT
	fbTx 		: FB_FrameFifo;(* TX fifo * To send *)
	fbLog		: FB_LogFifo;(* Log message fifo *)
	byteBufferToSend	: ARRAY[0..PLCPRJ_BUFFER_SIZE] OF BYTE;
	byteFrameBuffer: ARRAY[0..EPICS_MAX_FRAME_SIZE] OF BYTE;
	nFrameBufferIndex:INT:=0;
END_VAR

VAR	
	nADSBytesToRead:INT:=0;
	nSize: INT;
	i: INT;
	sTemp: STRING(255):='';
	nErrorCode:UDINT;
	//Below data types are supported by the EPCIS interface
	pINT16 :POINTER TO INT;
	pBYTE8: POINTER TO BYTE;
	pSINT8: POINTER TO SINT;
	pUINT16:POINTER TO UINT;
	pINT32: POINTER TO DINT;
	pUINT32:POINTER TO UDINT;
	pLINT64:POINTER TO LINT;
	pULINT64:POINTER TO ULINT;
	pREAL32:POINTER TO REAL;
	pREAL64:POINTER TO LREAL;
	pBOOL: POINTER TO BOOL;
	pString: POINTER TO STRING;
	
	
	//ADS_BIG types (structs)
	fbReadDUT_AxisStatus_v0_01:FB_Read_DUT_AxisStatus_v0_01;
	
	//Buffer to push data into Frame Buffer		
	pbEpicsCommandDelimiter: POINTER TO BYTE;
	iADSReadBufferIndex: INT;
	bTransferInASCII: BOOL:=TRUE; //Otherwise binary format
	nBytes: INT;
	//fArray:POINTER TO ARRAY[0..10] OF LREAL;
	bExecuteOld: BOOL:=FALSE;
	sValue: STRING;
	nCompensation: INT;
END_VAR

VAR_OUTPUT	
	bBusy: BOOL:=FALSE;
	bDone: BOOL:=FALSE;
	bError: BOOL:=FALSE;
	nErrorId: UDINT:=0;	
	bADSToFrameBufferComplete: BOOL;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[


bBusy:=TRUE;
bDone:=FALSE;
bError:=FALSE;

//prepare for new command
IF NOT bExecuteOld AND bExecute THEN
	iADSReadBufferIndex:=0;
	bADSToFrameBufferComplete:=FALSE;
END_IF

IF bExecute THEN
	nFrameBufferIndex:=0;		
 	IF(symbolInfo.byteSize>PLCPRJ_BUFFER_SIZE) AND iADSReadBufferIndex=0 THEN 
		nADSBytesToRead:=UDINT_TO_INT(PLCPRJ_BUFFER_SIZE);
	ELSE
		nADSBytesToRead:=UDINT_TO_INT( symbolInfo.byteSize);
	END_IF
	IF bReturnVariableName THEN //Include variablename in string to return to EPCIS
		nFrameBufferIndex:=len(sVariableName);
		MEMCPY(destAddr:=ADR(byteFrameBuffer[0]),srcAddr:=ADR(sVariableName),n:=nFrameBufferIndex);
		byteFrameBuffer[nFrameBufferIndex]:=EPICS_ASCII_EQUAL;
		nFrameBufferIndex:=nFrameBufferIndex+1;
	END_IF
	IF NOT (symbolInfo.adsDataType= ADST_STRING OR  symbolInfo.adsDataType=ADST_BIGTYPE OR  symbolInfo.adsDataType=ADST_WSTRING OR symbolInfo.adsDataType=ADST_MAXTYPES OR symbolInfo.adsDataType=ADST_REAL80  OR symbolInfo.adsDataType=ADST_VOID) THEN
		nErrorId:=0;				
		bADSToFrameBufferComplete:=TRUE;
		CASE symbolInfo.adsDataType OF					
			ADST_INT8: //sint				
				nSize:=1;
				nCompensation:=1;					
			ADST_UINT8:  //byte
				nSize:=1;
				nCompensation:=1;										
			ADST_INT16:  
				nSize:=2;
				nCompensation:=1;	
			ADST_UINT16:  
				nSize:=2;	
				nCompensation:=1;
			ADST_INT32:  //Dint
				nSize:=4;		
				nCompensation:=2;												
			ADST_UINT32:					
				nSize:=4;		
				nCompensation:=2;							
			ADST_INT64:  
				nSize:=8;		
				nCompensation:=2;											
			ADST_UINT64: 
				nSize:=8;		
				nCompensation:=2;							
			ADST_REAL32:  
				nSize:=4;		
				nCompensation:=2;							
			ADST_REAL64: 																							
				nSize:=8;		
				nCompensation:=2;															
			ADST_BIT:  					
				nSize:=1;		
				nCompensation:=1;																	 
		END_CASE						
		FOR i:=iADSReadBufferIndex TO (nADSBytesToRead-nCompensation) BY nSize DO
 							
			CASE symbolInfo.adsDataType OF					
				ADST_INT8: //sint				
					nSize:=1;	
					pSINT8:=ADR(byteBufferToSend[i]);
					sTemp:=SINT_TO_STRING( Tc2_Utilities.PSINT_TO_SINT(pSINT8));
				ADST_UINT8:  //byte
					nSize:=1;									
					pBYTE8:=ADR(byteBufferToSend[i]);
					sTemp:=BYTE_TO_STRING( Tc2_Utilities.PBYTE_TO_BYTE(pBYTE8));
				ADST_INT16:  
					nSize:=2;	
					pInt16:=ADR(byteBufferToSend[i]);
					sTemp:=INT_TO_STRING( Tc2_Utilities.PINT_TO_INT(pInt16));
				ADST_UINT16:  
					nSize:=2;	
					puInt16:=ADR(byteBufferToSend[i]);
					sTemp:=INT_TO_STRING( Tc2_Utilities.PUINT_TO_UINT(puInt16));
				ADST_INT32:  //Dint
					nSize:=4;
					pInt32:=ADR(byteBufferToSend[i]);
					sTemp:=DINT_TO_STRING( Tc2_Utilities.PDINT_TO_DINT(pInt32));									
				ADST_UINT32:					
					nSize:=4;									
					puInt32:=ADR(byteBufferToSend[i]);
					sTemp:=UDINT_TO_STRING( Tc2_Utilities.PUDINT_TO_UDINT(puInt32));
				ADST_INT64:  
					nSize:=8;									
					pLINT64:=ADR(byteBufferToSend[i]);
					sTemp:=LINT_TO_STRING( Tc2_Utilities.PLINT_TO_LINT(pLINT64));				
				ADST_UINT64: 
					nSize:=8;									
					pULINT64:=ADR(byteBufferToSend[i]);
					sTemp:=ULINT_TO_STRING( Tc2_Utilities.PULINT_TO_ULINT(pULINT64));
				ADST_REAL32:  
					nSize:=4;									
					pREAL32:=ADR(byteBufferToSend[i]);
					sTemp:=REAL_TO_STRING( Tc2_Utilities.PREAL_TO_REAL(pREAL32));
				ADST_REAL64: //LREAL																							
					nSize:=8;		
					pREAL64:=ADR(byteBufferToSend[i]);
					sTemp:=LREAL_TO_STRING( Tc2_Utilities.PLREAL_TO_LREAL(pREAL64));															
				ADST_BIT:  				
					nSize:=1;									
					pBOOL:=ADR(byteBufferToSend[i]);					
					IF Tc2_Utilities.PBOOL_TO_BOOL(pBOOL)THEN
						sTemp:='1';
					ELSE
						sTemp:='0';	
					END_IF																	 
			END_CASE	
								
			IF i>0 THEN // dont and separator for first value							
				sTemp:=Tc2_Standard.CONCAT(str1:=EPICS_ARRAY_DELIMITER,str2:=sTemp);
			END_IF; 								
			IF (nFrameBufferIndex+len(sTemp)+3)>EPICS_MAX_FRAME_SIZE THEN
				fbTx.AddTail( bPut := ADR(byteFrameBuffer), nWriteCount:=nFrameBufferIndex );(* Put string to the tx fifo *)
				nFrameBufferIndex:=0;
			
				IF NOT fbTx.bOk THEN(* TX fifo overflow => log error *)								
					fbLog.Error( sMessage := 'FB_FrameFifo(sender)', nErrID := PLCPRJ_ERROR_SENDFIFO_OVERFLOW ); 
					bError:=TRUE;
					nErrorId:=PLCPRJ_ERROR_SENDFIFO_OVERFLOW;
					RETURN;
				END_IF
				iADSReadBufferIndex:=i;
				bADSToFrameBufferComplete:=FALSE;
				EXIT; //One frame is full wait untill sent then contiue for loop to fill next frame	
			ELSE
				memcpy(srcAddr:=ADR(sTemp),destAddr:=ADR(byteFrameBuffer)+nFrameBufferIndex,n:=len(sTemp));
				nFrameBufferIndex:=nFrameBufferIndex+len(sTemp);
			END_IF																																														
		END_FOR;
	ELSE
		CASE symbolInfo.adsDataType OF					
				ADST_VOID: 				
					; //Data type ADST_VOID not implmented	
				ADST_STRING:											
					pString:=ADR(byteBufferToSend[0]);						
					nFrameBufferIndex:=nFrameBufferIndex+MIN(nADSBytesToRead,len(STR :=PSTRING_TO_STRING(pString)));//Find length of string								
					memcpy(srcAddr:=ADR(byteBufferToSend[0]),destAddr:=ADR(byteFrameBuffer[0]),n:=nFrameBufferIndex);						
					bADSToFrameBufferComplete:=TRUE;										
				ADST_WSTRING:
					; //Data type ADST_WSTRING not implmented
				ADST_BIGTYPE:
					//Support for structures (DUT)
					//Add FB:s generated by TwinCatEpicsUtilities here (also needs to be declared)
					fbReadDUT_AxisStatus_v0_01(sVariableName:=sVariableName,sSymDataType:=symbolInfo.symDataType,byteADSReadBuffer:=byteBufferToSend,byteFrameBuffer:=byteFrameBuffer,fbTx:=fbTx,fbLog:=fbLog,iFrameBufferIndex:=nFrameBufferIndex,bReady:=bADSToFrameBufferComplete);														
				ADST_MAXTYPES:
					; //Data type ADST_MAXTYPES not implmented
				ADST_REAL80:
					; //Data type ADST_REAL80 not implmented1
		END_CASE	
	END_IF																											
	//Terminate and go to next step if ADS buffer is empty, otherwise execute this state once more.
	IF bADSToFrameBufferComplete (*AND nFrameBufferIndex > 0 *) THEN
	(*	//Add end delimiters, last string
		pbEpicsCommandDelimiter:=ADR(EPICS_COMMAND_DELIMITER);
		byteFrameBuffer[nFrameBufferIndex]:=  PBYTE_TO_BYTE(pbEpicsCommandDelimiter);
		nFrameBufferIndex:=nFrameBufferIndex+1;					
		IF bWriteFrameTerminator THEN
			byteFrameBuffer[nFrameBufferIndex]:=byteTerminator; 	//LN or CR
			nFrameBufferIndex:=nFrameBufferIndex+1; 				//Buffer starts from 0
		END_IF		
		
		fbTx.AddTail( bPut := ADR(byteFrameBuffer[0]), nWriteCount:=nFrameBufferIndex);(* Put string to the tx fifo *)
		IF NOT fbTx.bOk THEN(* TX fifo overflow => log error *)
			fbLog.Error( sMessage := 'FB_FrameFifo(sender)', nErrID := PLCPRJ_ERROR_SENDFIFO_OVERFLOW ); 
			bError:=TRUE;
			nErrorId:=PLCPRJ_ERROR_SENDFIFO_OVERFLOW;		
			RETURN;
		END_IF		
		bADSToFrameBufferComplete:=FALSE;*)	
		bBusy:=FALSE;
		bDone:=TRUE;	
	END_IF			
ELSE
	bBusy:=FALSE;
	bDone:=FALSE;
	bError:=FALSE;
	nErrorId:=0;
	bADSToFrameBufferComplete:=FALSE;
END_IF
bExecuteOld:=bExecute;			
	]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>