<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_FrameFifo" Id="{27389f97-b418-47c2-a706-f2be13cf8449}">
    <Declaration><![CDATA[(* Tx (byte data) fifo control function block (Older where based on string format) *)
FUNCTION_BLOCK FB_FrameFifo
VAR
	sVersion: STRING:='0.9.0';
END_VAR
VAR_INPUT
	bLog		: BOOL			:= FALSE;(* TRUE => Enable log message output, FALSE => Disable *)
	sPrefix		: STRING		:= 'Unknown::';(* Log message description string (allows the identification of log message source) *)
	bPut		: POINTER TO ARRAY[0..EPICS_MAX_FRAME_SIZE] OF BYTE; (* Byte message to add (write) to the fifo *)
	bGet		: POINTER TO ARRAY[0..EPICS_MAX_FRAME_SIZE] OF BYTE; (* Byte message removed (read) from fifo *)
	nWriteCount : UDINT:=0;
	nReadBufferSize : UDINT:=0;
END_VAR
VAR_OUTPUT
	bOk			: BOOL; 	 	(* TRUE = New entry added or removed succesfully, FALSE = Fifo overflow or fifo empty *)
	nCount		: UDINT			:= 0;(* Number of fifo entries *)
	cbFree		: UDINT 		:= 0;(* Free buffer space *)
	nReadCount	: UDINT:=0;
END_VAR
VAR
	fbBuffer 	: FB_MemRingBuffer;(* Basic (lower level) string buffer control function block *)
	buffer		: ARRAY[-3..PLCPRJ_BUFFER_SIZE] OF BYTE;(* Internal buffer memory *)
	sPut		: T_MaxString;
	nMax: UDINT;
	spBufferString: POINTER TO STRING;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[

;
]]></ST>
    </Implementation>
    <Action Name="Clear" Id="{65c4d913-c207-4af5-8ebb-683778b9e2ed}">
      <Implementation>
        <ST><![CDATA[(* Resets fifo = clears all data *)
fbBuffer.A_Reset( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer),
				bOk=>bOk, nCount=>nCount );
cbFree := PLCPRJ_BUFFER_SIZE;(* Free buffer size *)]]></ST>
      </Implementation>
    </Action>
    <Action Name="AddTail" Id="{b5838eb6-631e-4dd6-b281-5807acfa3e62}">
      <Implementation>
        <ST><![CDATA[(* Adds new fifo entry *)
fbBuffer.A_AddTail( pBuffer:= ADR(buffer),pWrite:=bPut,cbWrite:=nWriteCount,cbBuffer:= SIZEOF(buffer),
					 bOk=>bOk, nCount=>nCount );

IF bOk THEN
	cbFree := PLCPRJ_BUFFER_SIZE - fbBuffer.cbSize;(* Calculate the free buffer space *)
	IF bLog THEN(* Log message *)
		IF 	nWriteCount>50 THEN
			nMax:=50;
		ELSE
			nMax:=nWriteCount;
		END_IF
		sPut:='';
		memcpy(destAddr:=ADR(sPut[0]),srcAddr:=(bPut+nWriteCount-nMax),n:=nMax); //Copy byte data to string
		sPut[nMax]:=0; //Terminate string
		ADSLOGSTR( ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG, CONCAT( ''(*sPrefix*), '"%s"' ),sPut );
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="RemoveHead" Id="{daa63c42-6202-42fc-a612-e50c3a076901}">
      <Implementation>
        <ST><![CDATA[(* Removes oldest fifo entry *)
//fbBuffer.A_RemoveHead( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer), pRead:=bGet,
//						bOk=>bOk,cbReturn=>nReadCount, nCount=>nCount, cbRead:=nReadBufferSize);
fbBuffer.A_RemoveHead( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer), pRead:=bGet,
						bOk=>bOk,cbReturn=>nReadCount, nCount=>nCount, cbRead:=nReadBufferSize);
						
						
						
IF bOk THEN
	cbFree := PLCPRJ_BUFFER_SIZE - fbBuffer.cbSize;(* Calculate the free buffer space *)
	//ADSLOGSTR( ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG, CONCAT( 'Took bytes OK: ', '"%s"' ) ,UDINT_TO_STRING(ncount));
ELSE
	
	//ADSLOGSTR( ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG, CONCAT( ''(*sPrefix*), '"%s"' ),'Took bytes Fail' );
END_IF
	
]]></ST>
      </Implementation>
    </Action>
    <ObjectProperties />
  </POU>
</TcPlcObject>