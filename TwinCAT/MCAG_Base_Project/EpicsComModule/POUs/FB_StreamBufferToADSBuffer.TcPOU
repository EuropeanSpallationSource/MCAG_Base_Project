<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_StreamBufferToADSBuffer" Id="{d14862f3-4d19-4f7b-b33b-cf7f857811b2}">
    <Declaration><![CDATA[///#########################################################
///Function Block for parsing of ASCII Stream to binary ADS buffer 
///	Library:		
///	
///
///	Global Variables:
///	- EPICS_MAX_FRAME_SIZE					
///	- EPICS_ARRAY_DELIMITER					
///	- EPICS_COMMAND_DELIMITER
/// - PLCPRJ_BUFFER_SIZE				 
///
///	Data types:
///	
///	External functions:
///		- TC2_Standard lib
///		- Tc2_Utilities lib
///		- Tc2_System lib
///		
///###########################################################
FUNCTION_BLOCK FB_StreamBufferToADSBuffer
VAR
	sVersion: STRING:='0.9.0';
END_VAR
VAR_INPUT
	bExecute: BOOL;
	symbolInfo:SYMINFOSTRUCT;	
	nBufferToParseLength:UDINT:=0;
END_VAR
VAR_IN_OUT	
	fbLog				: FB_LogFifo;(* Log message fifo *)
	byteASCIIBufferToParse	: ARRAY[0..PLCPRJ_BUFFER_SIZE] OF BYTE;
	byteBinayBufferOutput		: ARRAY[0..PLCPRJ_BUFFER_SIZE] OF BYTE;//Max buffer for input arrays in 'any data type'. Consider max 8 bytes for each char in output string array. Not so nice to hardcode size but to avoid _NEW operator
END_VAR
VAR		
	psValue: POINTER TO STRING; //string to point into byte buffer
	nIndex:INT:=0;
	pBuffer:PVOID;
	nInt16Value:INT:=0;
	nUInt16Value:UINT:=0;
	bValue:BOOL:=FALSE;
	r64Value:LREAL:=0.0;
	r32Value:REAL:=0.0;
	nUdInt32Value: UDINT:=0;
	nLInt64Value:LINT:=0;
	stringValue:STRING(255):='';
	sValue:STRING(20):='';
	nByteValue: BYTE:=0;
	nSInt8Value:SINT:=0;
	nDint32Value:DINT:=0;
	nULInt64Value:ULINT:=0;
	sVal: STRING(255);
	nLoopCounter: INT:=0;
	nSize: INT;
	nBufferToParseIndex: INT;
	nAsciiLength: DINT;
	sFind:STRING;
	nIndex2: INT;
	pString: POINTER TO string;	
END_VAR

VAR_OUTPUT	
	bBusy: BOOL;
	bDone: BOOL;
	bError: BOOL;
	nErrorId: UDINT;
	nBinaryBytesWritten:UDINT:=0;
	nASCIIBytesParsed:UDINT:=0;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[
bBusy:=TRUE;
bDone:=FALSE;
bError:=FALSE;
IF bExecute THEN
	nBufferToParseIndex:=0;					
	nLoopCounter:=0;		
	sFind:='                                ';	
	memcpy(destAddr:=ADR(sFind),srcAddr:=ADR(byteASCIIBufferToParse[nBufferToParseIndex]),n:=30);	 //30 bytes is longer than all current supported data types	. NOTE Ascii																																					
	nIndex:=find(STR1:=sFind,STR2:=EPICS_ARRAY_DELIMITER);	
	IF nIndex=0 OR nIndex > nBufferToParseLength THEN //Scalar
		nIndex:=find(STR1:=sFind,STR2:=EPICS_COMMAND_DELIMITER);
		IF nIndex>nBufferToParseLength+1 THEN
			nIndex:=UDINT_TO_INT( nBufferToParseLength+1); //Ensure inside buffer			
		END_IF			
	END_IF

	IF(nBufferToParseLength>0) THEN
		IF NOT (symbolInfo.adsDataType= ADST_STRING OR  symbolInfo.adsDataType=ADST_BIGTYPE OR  symbolInfo.adsDataType=ADST_WSTRING OR symbolInfo.adsDataType=ADST_MAXTYPES OR symbolInfo.adsDataType=ADST_REAL80  OR symbolInfo.adsDataType=ADST_VOID) THEN	//Special cases							
			WHILE  nIndex>0 AND symbolInfo.byteSize> nLoopCounter*nSize AND nBufferToParseIndex+nIndex<PLCPRJ_BUFFER_SIZE-255 AND nBufferToParseLength>nBufferToParseIndex DO //-255 to be able to allocate string variable 													
				sVal:='';
				MEMSET(destAddr:=ADR(sVal),fillByte:=0,n:=20); //No data type will be longer than 20byte
				memcpy(destAddr:=ADR(sVal),srcAddr:=ADR(byteASCIIBufferToParse[nBufferToParseIndex]),n:=nIndex-1);
				sVal[nIndex]:=0;						
				CASE symbolInfo.adsDataType OF					
					ADST_INT8: //sint				
						nSize:=1;	
						nSInt8Value:=STRING_TO_SINT(sVal);					
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nSInt8Value), nSize);	
					ADST_UINT8:  //byte
						nSize:=1;	
						nByteValue:=STRING_TO_BYTE(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nByteValue), nSize);	
					ADST_INT16:  
						nSize:=2;	
						nInt16Value:=STRING_TO_INT(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nInt16Value), nSize);	
					ADST_UINT16:  
						nSize:=2;	
						nUInt16Value:=STRING_TO_UINT(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nUInt16Value), nSize);		
					ADST_INT32:  //Dint
						nSize:=4;
						nDint32Value:=STRING_TO_DINT(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nDint32Value), nSize);	
					ADST_UINT32:					
						nSize:=4;									
						nUdInt32Value:=STRING_TO_UDINT(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nUdInt32Value), nSize);		
					ADST_INT64:  
						nSize:=8;									
						nLInt64Value:=STRING_TO_LINT(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nLInt64Value), nSize);							
					ADST_UINT64: 
						nSize:=8;									
						nULInt64Value:=STRING_TO_ULINT(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(nULInt64Value), nSize);
					ADST_REAL32:  
						nSize:=4;									
						r32Value:=STRING_TO_REAL(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(r32Value), nSize);	
					ADST_REAL64: //LREAL																							
						nSize:=8;		
						r64Value:=STRING_TO_LREAL(sVal);
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(r64Value), nSize);													
					ADST_BIT:  					
						nSize:=1;																																											
						IF len(str:=sVal)<4 THEN  //"1" OR "0"
							bValue:=INT_TO_BOOL(find(str1:=sVal,STR2:='1'));
						ELSE  						//"TRUE" OR "FALSE"
							bValue:=STRING_TO_BOOL(sVal);
						END_IF								
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[nLoopCounter*nSize]),srcAddr:=ADR(bValue), nSize);	//Must test																	 
				END_CASE																																			
				nBufferToParseIndex:=nBufferToParseIndex+nIndex;			
				sFind:='                                ';				
				memcpy(destAddr:=ADR(sFind),srcAddr:=ADR(byteASCIIBufferToParse[nBufferToParseIndex]),n:=30);	 //30 bytes is longer than all current supported data types ASCII				 																																								
				nIndex:=find(STR1:=sFind,STR2:=EPICS_ARRAY_DELIMITER);
				IF nIndex=0 THEN
					nIndex:=find(STR1:=sFind,STR2:=EPICS_COMMAND_DELIMITER);  //Last value in array					
				END_IF												 																									
				nLoopCounter:=nLoopCounter+1;																						  								 									
			END_WHILE
			nBinaryBytesWritten:=nLoopCounter*nSize;
			nASCIIBytesParsed:=	nBufferToParseLength;	
		ELSE  //Special cases
			CASE symbolInfo.adsDataType OF					
					ADST_VOID: 				
						; //Data type ADST_VOID not implmented	
					ADST_STRING:						
						IF(symbolInfo.byteSize< PLCPRJ_BUFFER_SIZE) THEN
							MEMSET(destAddr:=ADR(byteBinayBufferOutput[0]),fillByte:=0,n:=symbolInfo.byteSize);//Clear complete string. Otherwise only a part of the string will be overwritten
						END_IF																											
						MEMCPY(destAddr:=ADR(byteBinayBufferOutput[0]),srcAddr:=ADR(byteASCIIBufferToParse[0]), nBufferToParseLength);
						nBinaryBytesWritten:=symbolInfo.byteSize; //Allways send complete string
						nASCIIBytesParsed:=	nBufferToParseLength;					
					ADST_WSTRING:
						; //Data type ADST_WSTRING not implmented
					ADST_BIGTYPE:					
						; //Data type ADST_BIGTYPE not implmented
					ADST_MAXTYPES:
						; //Data type ADST_MAXTYPES not implmented
					ADST_REAL80:
						; //Data type ADST_REAL80 not implmented1
			END_CASE													
		END_IF																					
	END_IF																								
	bBusy:=FALSE;
	bDone:=TRUE;	
ELSE
	bBusy:=FALSE;
	bDone:=FALSE;
	bError:=FALSE;
	nErrorId:=0;
END_IF]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>