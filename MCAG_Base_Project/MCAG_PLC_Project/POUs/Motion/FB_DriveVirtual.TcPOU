<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_DriveVirtual" Id="{45901cd0-c6d2-4114-b7cf-de832171219f}">
    <Declaration><![CDATA[///#########################################################
///Function block to run a virtual drive with Nc
///	Library:		
///	Tc2_MC2.lib
///
///	Global Variables:
///	
///	Data types:
///	
///	External functions:
///
///###########################################################
FUNCTION_BLOCK FB_DriveVirtual
VAR
	sVersion: STRING:='1.0.2';
	bMovingRelOrAbs: BOOL;
END_VAR
VAR_INPUT
	En: BOOL;
	bEnable: BOOL;
	bReset: BOOL;
	bExecute: BOOL;
	/////	nCommand...
	/////	0 = Jog
	/////	1 = MoveVelocity
	/////	2 = MoveRelative
	/////	3 = MoveAbsolut
	/////	4 = MoveModulo
	/////	10 = Homing
	/////	20 = SuperInp >>>ToBe
	/////	30 = Gear
	nCommand: UINT;
	nCmdData: UINT;
	fVelocity: LREAL;
	fPosition: LREAL;
	fAcceleration: LREAL;
	fDeceleration: LREAL;
	bJogFwd: BOOL;
	bJogBwd: BOOL;
	bLimitFwd: BOOL;
	bLimitBwd: BOOL;	
	fOverride: LREAL := 100;
	bHomeSensor: BOOL;
	MasterAxis: AXIS_REF;
	nMotionAxisID:UDINT:=0;  //Axis id in Motion (NC) 
END_VAR
VAR_OUTPUT
	EnO: BOOL;
	bEnabled: BOOL;
	bBusy: BOOL;
	bDone: BOOL;
	bError: BOOL;
	bHomed: BOOL;
	nErrorId: UDINT;
	Status: ST_AxisStatus;
	fActVelocity: LREAL;
	fActPosition: LREAL;
	fActDiff: LREAL;

END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR	
	bFirstScan: BOOL := TRUE;
	iCounter: INT := 0;
	fOldVelocity: LREAL;
	fbReset: MC_Reset;
	fbPower: MC_Power;
	fbHalt: MC_Halt;
	fbJog: MC_Jog;
	fbMoveVelocity: MC_MoveVelocity;
	fbMoveRelative: MC_MoveRelative;
	fbMoveAbsolute: MC_MoveAbsolute;
	fbMoveModulo: MC_MoveModulo;
	fbHome: MC_Home;
	fbGearInDyn: MC_GearInDyn;
	fbGearOut: MC_GearOut;
	stAxisStatus: DUT_AxisStatus_v0_01;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[EnO:=En;

bHomed:=Axis.Status.Homed; //Add in DUT_AxisStatus later
bDone:=FALSE;

(*Reset*)
fbReset(
	Execute:=bReset AND Axis.Status.Error,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Error=> ,
	ErrorID=> );

(*Power*)
fbPower(
	Axis:=Axis,
	Enable:=bEnable,
	Enable_Positive:=bLimitFwd AND bEnable,
	Enable_Negative:=bLimitBwd AND bEnable,
	Override:=fOverride,
	BufferMode:= ,
	Status=> ,
	Busy=> ,
	Active=> ,
	Error=> ,
	ErrorID=> );

(*Halt*)
fbHalt(
	Execute:=NOT bExecute  AND (((fbMoveVelocity.Busy OR fbPower.Busy) AND (nCommand=1)) OR (fbMoveRelative.Busy AND (nCommand=2)) OR (fbMoveAbsolute.Busy AND (nCommand=3)) OR (fbMoveModulo.Busy AND (nCommand=4)) OR (fbhome.Busy AND (nCommand=10))),
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=Axis ,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*Jog (Command = 0)*)
fbJog(
	JogForward:=bJogFwd AND (nCommand=0) ,
	JogBackwards:=bJogBwd AND (nCommand=0) ,
	Mode:=nCmdData,
	Position:= ,
	Velocity:=fVelocity,
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

	;
	iCounter:=iCounter+1;
(*MoveVelocity (Command = 1)*)
fbMoveVelocity(
	Execute:=bExecute (*AND (fOldVelocity=fVelocity)*) AND (nCommand=1),
	Velocity:=ABS(fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	Direction:=SEL(fVelocity<0, MC_Positive_Direction, MC_Negative_Direction),
	BufferMode:= ,
	Options:= ,
	Axis:=Axis,
	InVelocity=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*MoveRelative (Command = 2)*)
fbMoveRelative(
	Execute:=bExecute AND (nCommand=2), 
	Distance:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
IF nCommand=2 THEN
	bDone:=fbMoveRelative.Done;
END_IF
	
(*MoveAbsolute (Command = 3)*)
fbMoveAbsolute(
	Execute:=bExecute AND (nCommand=3),
	Position:=fPosition,
	Velocity:=ABS(fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

IF nCommand=3 THEN
	bDone:=fbMoveAbsolute.Done;
END_IF

(*MoveModulo (Command = 4)*)
fbMoveModulo(
	Execute:=bExecute AND (nCommand=4), 
	Position:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration, 
	Deceleration:=fDeceleration, 
	Jerk:=0, 
	Direction:=nCmdData, 
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

IF nCommand=4 THEN
	bDone:=fbMoveModulo.Done;
END_IF
	
(*Home (Command = 10)*)
fbHome(
	Execute:=bExecute AND (nCommand=10),
	Position:=fPosition,
	HomingMode:=nCmdData,
	BufferMode:= ,
	Options:= ,
	bCalibrationCam:=bHomeSensor,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

IF nCommand=10 THEN
	bDone:=fbHome.Done;
END_IF

(*Gear (Command = 30)*)
fbGearInDyn(
	Enable:=bExecute  AND (nCommand=30),
	GearRatio:=SEL(nCmdData>0, 1,fVelocity), 
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0.0,
	BufferMode:= , 
	Options:= , 
	Master:=MasterAxis,
	Slave:=Axis,
	InGear=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
fbGearOut(
	Execute:=NOT bExecute AND Axis.Status.NotMoving AND (nCommand=30),
	Slave:=Axis,
	Error=>,
	Done=>,
	ErrorID=>);


IF nCommand=30 THEN
	bDone:=Axis.Status.Coupled;
END_IF

fOldVelocity:=fVelocity;

(*Busy*)
bMovingRelOrAbs := (nCommand = 2 OR nCommand = 3) AND NOT axis.Status.InTargetPosition;
bBusy:=Axis.Status.HasJob OR Axis.Status.HomingBusy OR  bMovingRelOrAbs;

(*Enabled*)
bEnabled:=fbPower.Status;

(*Error from functions and Nc*)
IF fbPower.Error AND fbPower.Active THEN
	bError:=fbPower.Enable;
	nErrorId:=fbPower.ErrorID;
ELSIF fbHalt.Error AND fbHalt.Active THEN
	bError:=fbHalt.Execute;
	nErrorId:=fbHalt.ErrorID;
ELSIF fbJog.Error AND fbJog.Active THEN
	bError:=fbJog.JogForward OR fbJog.JogBackwards;
	nErrorId:=fbJog.ErrorID;
ELSIF fbMoveVelocity.Error AND fbMoveVelocity.Active THEN
	bError:=fbMoveVelocity.Execute;
	nErrorId:=fbMoveVelocity.ErrorID;
ELSIF fbMoveRelative.Error AND fbMoveRelative.Active THEN
	bError:=fbMoveRelative.Execute;
	nErrorId:=fbMoveRelative.ErrorID;
ELSIF fbMoveAbsolute.Error AND fbMoveAbsolute.Active THEN
	bError:=fbMoveAbsolute.Execute;
	nErrorId:=fbMoveAbsolute.ErrorID;
ELSIF fbMoveModulo.Error AND fbMoveModulo.Active THEN
	bError:=fbMoveModulo.Execute;
	nErrorId:=fbMoveModulo.ErrorID;
ELSIF fbHome.Error AND fbHome.Active THEN
	bError:=fbHome.Execute;
	nErrorId:=fbHome.ErrorID;
ELSIF fbGearInDyn.Error AND fbGearInDyn.Active THEN
	bError:=fbGearInDyn.Enable;
	nErrorId:=fbGearInDyn.ErrorID;
ELSIF fbGearOut.Error AND Axis.Status.Coupled THEN
	bError:=fbGearOut.Execute;
	nErrorId:=fbGearOut.ErrorID;
ELSIF Axis.Status.Error  THEN
	bError:=TRUE;
	nErrorId:=Axis.Status.ErrorID;
(*ELSIF fbWriteToNC.bError THEN
	bError:=TRUE;
	nErrorId:=fbWriteToNC.nErrorId;*)		
ELSE
	bError:=FALSE;
	nErrorId:=0;
END_IF;

(*Status from Nc*)
Status:=Axis.Status;

(*Axis id in motion "motor"*)
nMotionAxisID:=axis.NcToPlc.AxisId;

(*Actual Velocity*)
fActVelocity:=Axis.NcToPlc.ActVelo;

(*Actual Position*)
IF Axis.Status.OpMode.Modulo THEN
	fActPosition:=Axis.NcToPlc.ModuloActPos;
ELSE
	fActPosition:=Axis.NcToPlc.ActPos;
END_IF

(*Actual Position*)
fActDiff:=Axis.NcToPlc.PosDiff;


//Status struct for EPICS communication
stAxisStatus.bEnable:=bEnable;
stAxisStatus.bEnabled:=bEnabled;
stAxisStatus.bError:=bError;
stAxisStatus.bExecute:=bExecute;
stAxisStatus.bHomeSensor:=bHomeSensor;
stAxisStatus.bJogBwd:=bJogBwd;
stAxisStatus.bJogFwd:=bJogFwd;
stAxisStatus.bLimitBwd:=bLimitBwd;
stAxisStatus.bLimitFwd:=bLimitFwd;
stAxisStatus.bReset:=bReset;
stAxisStatus.fAcceleration:=fAcceleration;
stAxisStatus.fActDiff:=fActDiff;
stAxisStatus.fActPosition:=fActPosition;
stAxisStatus.fActVelocity:=fActVelocity;
stAxisStatus.fDeceleration:=fDeceleration;
stAxisStatus.fOverride:=fOverride;
stAxisStatus.fPosition:=fPosition;
stAxisStatus.fVelocity:=fVelocity;
stAxisStatus.nCmdData:=nCmdData;
stAxisStatus.nCommand:=nCommand;
stAxisStatus.nErrorId:=nErrorId;
stAxisStatus.bBusy:=bBusy;
stAxisStatus.bHomed:=bHomed;

IF bFirstScan THEN
	bFirstScan:=FALSE;
END_IF]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>