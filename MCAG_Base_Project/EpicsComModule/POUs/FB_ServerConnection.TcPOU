<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_ServerConnection" Id="{47a014ee-06d6-4964-9a9a-be1fa4d97050}">
    <Declaration><![CDATA[///#########################################################
/// FB that handles one TCP/IP client connection. The code is based on Beckhoff sample code and only minor changes have been made for the EPICS interface.
/// 
///
///	Library:		
///	
///
///	Global Variables:
///	- EPICS_MAX_FRAME_SIZE					
///	- EPICS_ARRAY_DELIMITER					
///	- EPICS_COMMAND_DELIMITER
/// - PLCPRJ_BUFFER_SIZE				 
///
///	Data types:
///	
///	External functions:
///		- TC2_Standard lib
///		- Tc2_Utilities lib
///		- Tc2_System lib
///		
///
///###########################################################
FUNCTION_BLOCK FB_ServerConnection
VAR
	sVersion: STRING:='0.9.0';
END_VAR
VAR_IN_OUT
	fbTx 			: FB_FrameFifo;(* TX fifo *)
	fbRx 			: FB_FrameFifo;(* RX fifo *)
	fbLog			: FB_LogFifo;(* Log message fifo *)
	hListener		: T_HSOCKET;(* Listener socket handle *)
	bReset			: BOOL;
END_VAR
VAR_INPUT
	sSrvNetID		: T_AmsNetID	:= '';(* TwinCAT TCP/IP server network address *)
	bEnable 		: BOOL 			:= FALSE;(* TRUE => connect and exchange data, FALSE => disconnect *)
	tReconnect 		: TIME 			:= T#1S;(* Accept new connection (reconnect) after this time *)
	bLog			: BOOL			:= FALSE;(* TRUE => Enable log message output, FALSE => Disable *)
	sPrefix			: STRING 		:= 'SERVERx::';(* Log message description string (allows the identification of log message source) *)
END_VAR
VAR_OUTPUT
	bAccepted		: BOOL			:= FALSE;(* Accepted connection status *)
END_VAR
VAR
	fbAccept 		: FB_SocketAccept;
	fbClose			: FB_SocketClose;
	fbReceive		: FB_SocketReceive;
	fbSend			: FB_SocketSend;
	eStep			: E_ConnectionSteps;
	bSndBusy 		: BOOL;(* Tx state *)
	bRcvBusy 		: BOOL;(* Rx state *)
	bDisconnect		: BOOL;(* Disconnect flag, if set the socket will be closed *)

	fbAcceptTimer	: TON;(* Accept poll timer *)
	fbPollTimer		: TON;(* Receive poll timer *)
	fbRequestTimer	: TON;(* Request timeout timer *)
	
	rxBuffer		: ARRAY[0..PLCPRJ_BUFFER_SIZE] OF BYTE;
	bTxFrame		: ARRAY[0..EPICS_MAX_FRAME_SIZE+5] OF BYTE;
	sTxBuffer		: POINTER TO STRING; //TEMP
	nTxFrameReadLength  : UDINT;
	bRxFrame		: ARRAY[0..PLCPRJ_BUFFER_SIZE] OF BYTE;
	cbReceived		: UDINT;
	nLenOfString	: UDINT;(* String length inclusive the null delimiter *)
	bEndOfString	: BOOL := FALSE;
	bGetMoreData: BOOL;
	nTotalTxFrameReadLength: DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
CASE eStep OF
	eCONNECTION_STATE_IDLE:
		IF bEnable XOR bAccepted THEN
			IF bEnable THEN
				fbAcceptTimer( IN := TRUE );
				IF fbAcceptTimer.Q THEN
					
					fbTx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(sender)::' ), bLog := bLog );(* Clear send fifo *)
					fbRx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(receiver)::' ), bLog := bLog );(* Clear receiver fifo *)
					fbLog.Clear( sPrefix := sPrefix, bLog := bLog );(* Clear log fifo *)
					bSndBusy := FALSE;
					bRcvBusy := FALSE;
					bDisconnect := FALSE;
					cbReceived := 0;
					
					fbPollTimer( IN := FALSE, PT := T#0S );
					fbRequestTimer( IN := FALSE, PT := PLCPRJ_RECEIVE_TIMEOUT );
					fbAcceptTimer( IN := FALSE, PT := tReconnect );
					
					
					eStep := eCONNECTION_STATE_CONNECT_START;
				END_IF
			ELSE
				eStep := eCONNECTION_STATE_CLOSE_START;
			END_IF
		ELSIF bAccepted THEN
			eStep := eCONNECTION_STATE_DATAEXCHANGE;
		ELSE
			fbAcceptTimer( IN := FALSE, PT := T#0S );
		END_IF

	eCONNECTION_STATE_CONNECT_START:
		fbAccept( bExecute := FALSE );
		fbAccept( sSrvNetID := sSrvNetID, 
					hListener := hListener, 
					bExecute:= TRUE );
		eStep := eCONNECTION_STATE_CONNECT_WAIT;

	eCONNECTION_STATE_CONNECT_WAIT:
		fbAccept( bExecute := FALSE );
		IF NOT fbAccept.bBusy THEN
			IF NOT fbAccept.bError THEN
				IF fbAccept.bAccepted THEN
					bAccepted := TRUE;
					fbLog.Message( sMessage := 'Connection accepted!', hSocket := fbAccept.hSocket );
				END_IF
				eStep := eCONNECTION_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketAccept()', nErrId := fbAccept.nErrId );
				eStep := eCONNECTION_STATE_ERROR;
			END_IF
		END_IF

	eCONNECTION_STATE_DATAEXCHANGE:(* Data exchange state *)
		bDisconnect := NOT bEnable OR bDisconnect;(* User/internal disconnect requested? *)
		IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN
			bDisconnect := FALSE;
			eStep := eCONNECTION_STATE_CLOSE_START;(* Disconnect *)
		ELSE
	
			(* Send tx data *)
			IF NOT bDisconnect AND NOT bSndBusy THEN
				//Test to fill output buffer to a higher degree if needed by trying to get several items from fbTx
				bGetMoreData:=TRUE;	
				nTotalTxFrameReadLength:=0;
				WHILE bGetMoreData DO(* Success *)
					fbTx.RemoveHead( bGet := ADR(bTxFrame[nTotalTxFrameReadLength]), nReadCount=>nTxFrameReadLength,nReadBufferSize:=(SIZEOF(bTxFrame)-nTotalTxFrameReadLength));(* Remove oldest string entry s*)
					bGetMoreData:= fbTx.bOk; 
					IF bGetMoreData THEN
						nTotalTxFrameReadLength:=nTotalTxFrameReadLength+nTxFrameReadLength; //only inrease counter if successfull
					END_IF;										
				END_WHILE
				IF nTotalTxFrameReadLength>0 THEN
					sTxBuffer:=ADR(bTxFrame); //Just to se the data in string format
					fbSend( bExecute := FALSE );
					fbSend(	sSrvNetID := sSrvNetID, 
							hSocket	:= fbAccept.hSocket,
							pSrc	:= ADR( bTxFrame ),
							cbLen	:= DINT_TO_UINT(nTotalTxFrameReadLength),//INT_TO_UDINT(LEN( sTxFrame )) (*+ 1*),(* String length inclusive the zero delimiter *) (*Commented away because to much was sent to host (one '.' to much) *)
							bExecute:= TRUE );
					bSndBusy := TRUE;
				END_IF
							
				(*fbTx.RemoveHead( bGet := ADR(bTxFrame), nReadCount=>nTxFrameReadLength,nReadBufferSize:=SIZEOF(bTxFrame) );(* Remove oldest string entry s*)				
				IF fbTx.bOk THEN(* Success *)
					sTxBuffer:=ADR(bTxFrame); //Just to se the data in string format
					fbSend( bExecute := FALSE );
					fbSend(	sSrvNetID := sSrvNetID, 
							hSocket	:= fbAccept.hSocket,
							pSrc	:= ADR( bTxFrame ),
							cbLen	:= nTxFrameReadLength,//INT_TO_UDINT(LEN( sTxFrame )) (*+ 1*),(* String length inclusive the zero delimiter *) (*Commented away because to much was sent to host (one '.' to much) *)
							bExecute:= TRUE );
					bSndBusy := TRUE;
				END_IF
				*)
			ELSE
				fbSend( bExecute := FALSE );
				IF NOT fbSend.bBusy THEN
					bSndBusy := FALSE;
					IF fbSend.bError THEN
						fbLog.Error( sMessage := 'FB_SocketSend()', nErrId := fbSend.nErrId );
						bDisconnect := TRUE;(* Set flag *)
					END_IF
				END_IF
			END_IF
		
		
			(* Get rx data *)
			IF NOT bDisconnect AND NOT bRcvBusy THEN
				fbPollTimer( IN := TRUE );
				IF fbPollTimer.Q THEN
					fbPollTimer( IN := FALSE, PT := PLCPRJ_RECEIVE_POLLING_TIME );
					fbReceive( bExecute := FALSE );
					fbReceive( 	sSrvNetID := sSrvNetID, 
								hSocket	:= fbAccept.hSocket,
								pDest	:= ADR( rxBuffer ) + cbReceived,
								cbLen	:= SIZEOF( rxBuffer ) - cbReceived,
								bExecute:= TRUE );
					bRcvBusy := TRUE;
				END_IF
			ELSE
				fbReceive( bExecute := FALSE );
				IF NOT fbReceive.bBusy THEN
					bRcvBusy := FALSE;
					IF NOT fbReceive.bError THEN
						IF (fbReceive.nRecBytes > 0) THEN(* Bytes received *)
							
							fbPollTimer( IN := FALSE, PT := T#0S ); (* Bytes received => increase the read (polling) speed *)
							fbRequestTimer( IN := FALSE );(* Bytes received => disable timeout check *)
							cbReceived 	:= cbReceived + fbReceive.nRecBytes;(* Calculate the number of received data bytes *)
							
							//Move to input queue
							IF cbReceived>0 AND cbReceived<PLCPRJ_BUFFER_SIZE-1 AND cbReceived< fbRx.cbFree THEN 
								fbRx.AddTail( bPut := ADR(rxBuffer),nWriteCount:=UDINT_TO_INT(cbReceived));(* Put received message to the rx fifo *)
								cbReceived:=0;
								IF NOT fbRx.bOk THEN
									fbLog.Error( sMessage := 'FB_FrameFifo(receiver)', nErrID := PLCPRJ_ERROR_RECFIFO_OVERFLOW );
									bDisconnect := TRUE;(* Set flag *)
									RETURN;			
								END_IF
							
							END_IF
							
							//REPEAT
								
								(* Search for string end delimiter *)
							//	nLenOfString := 0;(* Reset string length *)
							//	bEndOfString := FALSE;
							//	REPEAT 
							//		IF rxBuffer[nLenOfString] = 10 THEN(* String end delimiter found Line feed *)
							//			bEndOfString := TRUE;
							//		END_IF
							//		nLenOfString := nLenOfString + 1;
							//	UNTIL bEndOfString OR (nLenOfString >= cbReceived)
							//	END_REPEAT
								
							//	IF bEndOfString THEN
							//		MEMSET( ADR( bRxFrame ), 0, SIZEOF( bRxFrame ) );
							//		MEMCPY(  ADR( bRxFrame ), ADR( rxBuffer ), MIN( SIZEOF(bRxFrame), nLenOfString ) );(* Copy the received string to the output variable (inclusive the end delimiter) *)
							//		MEMMOVE( ADR( rxBuffer ), ADR( rxBuffer[nLenOfString] ), cbReceived - nLenOfString  );(* Move the reamaining data bytes *)
							//		cbReceived := cbReceived - nLenOfString;(* Recalculate the reamaining data byte length *)
			
							//		fbRx.AddTail( bPut := bRxFrame );(* Put received message to the rx fifo *)
							//		IF NOT fbRx.bOk THEN
							//			fbLog.Error( sMessage := 'FB_FrameFifo(receiver)', nErrID := PLCPRJ_ERROR_RECFIFO_OVERFLOW );
							//			bDisconnect := TRUE;(* Set flag *)
							//			RETURN;
							//		END_IF
							//	END_IF

							//UNTIL NOT bEndOfString OR (cbReceived = 0)
							//END_REPEAT
		
						ELSE(* No bytes received *)
							fbRequestTimer( IN := TRUE, PT := PLCPRJ_RECEIVE_TIMEOUT );(* No bytes received => enable timeout check *)
							IF fbRequestTimer.Q THEN (* Timeout error*)
							//	fbRequestTimer( IN := FALSE );
							//	fbLog.Error( sMessage := 'FB_SocketReceive()', nErrID := PLCPRJ_ERROR_RECEIVE_TIMEOUT );
							//	bDisconnect := TRUE;(* Set flag *)
							END_IF
						END_IF
						
					ELSE(* Receive error *)
						fbLog.Error( sMessage := 'FB_SocketReceive()', nErrId := fbReceive.nErrId );
						bDisconnect := TRUE;(* Set flag *)
					END_IF
				END_IF(* IF NOT fbReceive.bBusy THEN *)
				
			END_IF(* IF NOT bDisconnect AND NOT bRcvBusy THEN *)
		
		END_IF(* IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN *)
	
	

	eCONNECTION_STATE_CLOSE_START:
		fbLog.Message( sMessage := 'Closing connection!', hSocket := fbAccept.hSocket );
		fbClose( bExecute := FALSE );
		fbClose( sSrvNetID := sSrvNetID, hSocket:= fbAccept.hSocket, bExecute:= TRUE );
		eStep := eCONNECTION_STATE_CLOSE_WAIT;

	eCONNECTION_STATE_CLOSE_WAIT:
		fbClose( bExecute := FALSE );
		IF NOT fbClose.bBusy THEN
			bAccepted := FALSE;
			IF NOT fbClose.bError THEN
				eStep := eCONNECTION_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketClose(accepted)', nErrId := fbClose.nErrId );
				eStep := eCONNECTION_STATE_ERROR;
			END_IF
		END_IF

	eCONNECTION_STATE_ERROR:
		IF bAccepted THEN
			eStep := eCONNECTION_STATE_CLOSE_START;
		ELSE
			eStep := eCONNECTION_STATE_IDLE;
		END_IF

END_CASE
]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>